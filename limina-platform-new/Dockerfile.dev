# Multi-stage Dockerfile for Limina Platform Development
FROM node:18-alpine AS base

# Install dependencies needed for development
RUN apk add --no-cache \
    libc6-compat \
    bash \
    curl \
    git \
    openssh-client

WORKDIR /app

# Development stage
FROM base AS development

# Set development environment
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1
ENV FORCE_COLOR=1

# Install global development tools
RUN npm install -g \
    nodemon \
    ts-node \
    typescript

# Copy package files first for better layer caching
COPY package*.json ./

# Install dependencies with legacy peer deps flag for React 19
RUN npm ci --legacy-peer-deps

# Copy source code
COPY . .

# Create directories for volumes
RUN mkdir -p volumes/kong volumes/storage volumes/db

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Start development server with hot reload
CMD ["npm", "run", "dev"]

# Production build stage
FROM base AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --legacy-peer-deps --only=production

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM base AS production

WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Set correct ownership
RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "server.js"]